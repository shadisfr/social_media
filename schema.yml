openapi: 3.0.3
info:
  title: ''
  version: 0.0.0
paths:
  /api/messages/conversation/{user_id}/:
    get:
      operationId: api_messages_conversation_list
      description: Fetches all messages exchanged between the authenticated user and
        the specified user.
      summary: Get conversation with a user
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
          description: ''
  /api/messages/conversation/{user_id}/read/:
    post:
      operationId: api_messages_conversation_read_create
      description: Marks all unread messages from a specified user as read.
      summary: Mark messages as read
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageStatus'
          description: ''
  /api/messages/conversations/:
    get:
      operationId: api_messages_conversations_list
      description: Retrieves a list of users the authenticated user has messaged.
      summary: List conversations
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Conversation'
          description: ''
  /api/messages/send/:
    post:
      operationId: api_messages_send_create
      description: API endpoint to send a new message.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendMessage'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SendMessage'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SendMessage'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendMessage'
          description: ''
  /api/notifications/:
    get:
      operationId: api_notifications_list
      description: API endpoint to list notifications for the authenticated user.
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
          description: ''
  /api/notifications/{notification_id}/read/:
    post:
      operationId: api_notifications_read_create
      description: Marks a specific notification as read.
      summary: Mark notification as read
      parameters:
      - in: path
        name: notification_id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationStatus'
          description: ''
  /api/posts/:
    get:
      operationId: api_posts_list
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
          description: ''
    post:
      operationId: api_posts_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Post'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Post'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
          description: ''
  /api/posts/{id}/:
    get:
      operationId: api_posts_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
          description: ''
    put:
      operationId: api_posts_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Post'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Post'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
          description: ''
    patch:
      operationId: api_posts_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPost'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPost'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPost'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
          description: ''
    delete:
      operationId: api_posts_destroy
      description: Allows an authenticated user to retrieve, edit, or delete their
        own post.
      summary: Retrieve, update, or delete a post
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
          description: ''
  /api/posts/{post_id}/comments/:
    get:
      operationId: api_posts_comments_list
      parameters:
      - in: path
        name: post_id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
          description: ''
    post:
      operationId: api_posts_comments_create
      parameters:
      - in: path
        name: post_id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Comment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Comment'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: ''
  /api/posts/{post_id}/like/:
    post:
      operationId: api_posts_like_create
      description: Toggles like status for a post.
      summary: Like or unlike a post
      parameters:
      - in: path
        name: post_id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LikeStatus'
          description: ''
  /api/posts/feed/:
    get:
      operationId: api_posts_feed_list
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
          description: ''
  /api/schema/:
    get:
      operationId: api_schema_retrieve
      description: |-
        OpenApi3 schema for this API. Format can be selected via content negotiation.

        - YAML: application/vnd.oai.openapi
        - JSON: application/vnd.oai.openapi+json
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ar-dz
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - ckb
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - ig
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - ky
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - ms
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - tg
          - th
          - tk
          - tr
          - tt
          - udm
          - ug
          - uk
          - ur
          - uz
          - vi
          - zh-hans
          - zh-hant
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
  /api/users/{user_id}/followers/:
    get:
      operationId: api_users_followers_list
      description: Retrieves a list of users who follow the specified user.
      summary: List followers
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
          description: ''
  /api/users/{user_id}/following/:
    get:
      operationId: api_users_following_list
      description: Retrieves a list of users the specified user is following.
      summary: List following users
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
          description: ''
  /api/users/follow/{user_id}/:
    post:
      operationId: api_users_follow_create
      description: Allows an authenticated user to follow another user.
      summary: Follow a user
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FollowStatus'
          description: ''
  /api/users/login/:
    post:
      operationId: api_users_login_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/users/refresh/:
    post:
      operationId: api_users_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/users/register/:
    post:
      operationId: api_users_register_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRegister'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRegister'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRegister'
          description: ''
  /api/users/unfollow/{user_id}/:
    post:
      operationId: api_users_unfollow_create
      description: Allows an authenticated user to unfollow another user.
      summary: Unfollow a user
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FollowStatus'
          description: ''
components:
  schemas:
    Comment:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: string
          format: email
          readOnly: true
        post:
          type: integer
        content:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - content
      - created_at
      - id
      - post
      - user
    Conversation:
      type: object
      properties:
        user_id:
          type: integer
        username:
          type: string
      required:
      - user_id
      - username
    FollowStatus:
      type: object
      properties:
        message:
          type: string
      required:
      - message
    LikeStatus:
      type: object
      properties:
        message:
          type: string
      required:
      - message
    Message:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        sender:
          type: string
          format: email
          readOnly: true
        receiver:
          type: string
          format: email
          readOnly: true
        content:
          type: string
        timestamp:
          type: string
          format: date-time
          readOnly: true
        is_read:
          type: boolean
      required:
      - content
      - id
      - receiver
      - sender
      - timestamp
    MessageStatus:
      type: object
      properties:
        message:
          type: string
      required:
      - message
    Notification:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
        sender:
          type: integer
        sender_username:
          type: string
          readOnly: true
        notification_type:
          $ref: '#/components/schemas/NotificationTypeEnum'
        post:
          type: integer
          nullable: true
        timestamp:
          type: string
          format: date-time
          readOnly: true
        is_read:
          type: boolean
      required:
      - id
      - notification_type
      - sender
      - sender_username
      - timestamp
      - user
    NotificationStatus:
      type: object
      properties:
        message:
          type: string
      required:
      - message
    NotificationTypeEnum:
      enum:
      - follow
      - like
      - comment
      type: string
      description: |-
        * `follow` - Follow
        * `like` - Like
        * `comment` - Comment
    PatchedPost:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        author:
          type: string
          format: email
          readOnly: true
        likes_count:
          type: integer
          readOnly: true
        content:
          type: string
        image:
          type: string
          format: uri
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
    Post:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        author:
          type: string
          format: email
          readOnly: true
        likes_count:
          type: integer
          readOnly: true
        content:
          type: string
        image:
          type: string
          format: uri
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - author
      - content
      - created_at
      - id
      - likes_count
    SendMessage:
      type: object
      properties:
        receiver:
          type: integer
        content:
          type: string
      required:
      - content
      - receiver
    TokenObtainPair:
      type: object
      properties:
        email:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - email
      - password
      - refresh
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    User:
      type: object
      description: Serializer for retrieving user details (excluding passwords)
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          maxLength: 254
        username:
          type: string
          maxLength: 150
        bio:
          type: string
          nullable: true
        profile_picture:
          type: string
          format: uri
          nullable: true
      required:
      - email
      - id
      - username
    UserRegister:
      type: object
      properties:
        email:
          type: string
          format: email
          maxLength: 254
        username:
          type: string
          maxLength: 150
        password:
          type: string
          writeOnly: true
          maxLength: 128
        password2:
          type: string
          writeOnly: true
        bio:
          type: string
          nullable: true
        profile_picture:
          type: string
          format: uri
          nullable: true
      required:
      - email
      - password
      - password2
      - username
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
